package sudoku

import (
	"fmt"
	"sync"
	"testing"
)

func TestSudokuOneSolution(t *testing.T) {
	c := Board{
		{1, 2, 3, 4, 5, 6, 7, 8, 9},
		{4, 5, 6, 7, 8, 9, 1, 2, 3},
		{7, 8, 9, 1, 2, 3, 4, 5, 6},
		{2, 3, 1, 5, 0, 0, 0, 0, 0},
		{5, 6, 4, 0, 3, 0, 0, 0, 0},
		{8, 9, 7, 0, 0, 1, 0, 0, 0},
		{3, 1, 2, 0, 0, 0, 5, 0, 0},
		{6, 4, 5, 0, 0, 0, 0, 3, 0},
		{9, 7, 8, 0, 0, 0, 0, 0, 1},
	}
	exps := []Board{
		{
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{4, 5, 6, 7, 8, 9, 1, 2, 3},
			{7, 8, 9, 1, 2, 3, 4, 5, 6},
			{2, 3, 1, 5, 9, 4, 6, 7, 8},
			{5, 6, 4, 8, 3, 7, 9, 1, 2},
			{8, 9, 7, 2, 6, 1, 3, 4, 5},
			{3, 1, 2, 6, 7, 8, 5, 9, 4},
			{6, 4, 5, 9, 1, 2, 8, 3, 7},
			{9, 7, 8, 3, 4, 5, 2, 6, 1},
		},
	}

	runCase(t, c, exps)
}

func TestSudokuTwoSolutions(t *testing.T) {
	c := Board{
		{1, 2, 3, 4, 5, 6, 7, 8, 9},
		{4, 5, 6, 7, 8, 9, 1, 2, 3},
		{7, 8, 9, 1, 2, 3, 4, 5, 6},
		{2, 3, 1, 5, 0, 0, 0, 0, 0},
		{5, 6, 4, 0, 0, 0, 0, 0, 0},
		{8, 9, 7, 0, 0, 1, 0, 0, 0},
		{3, 1, 2, 0, 0, 0, 5, 0, 0},
		{6, 4, 5, 0, 0, 0, 0, 3, 0},
		{9, 7, 8, 0, 0, 0, 0, 0, 1},
	}
	exps := []Board{
		{
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{4, 5, 6, 7, 8, 9, 1, 2, 3},
			{7, 8, 9, 1, 2, 3, 4, 5, 6},
			{2, 3, 1, 5, 9, 4, 6, 7, 8},
			{5, 6, 4, 8, 3, 7, 9, 1, 2},
			{8, 9, 7, 2, 6, 1, 3, 4, 5},
			{3, 1, 2, 6, 7, 8, 5, 9, 4},
			{6, 4, 5, 9, 1, 2, 8, 3, 7},
			{9, 7, 8, 3, 4, 5, 2, 6, 1},
		},
		{
			{1, 2, 3, 4, 5, 6, 7, 8, 9},
			{4, 5, 6, 7, 8, 9, 1, 2, 3},
			{7, 8, 9, 1, 2, 3, 4, 5, 6},
			{2, 3, 1, 5, 6, 4, 9, 7, 8},
			{5, 6, 4, 8, 9, 7, 3, 1, 2},
			{8, 9, 7, 2, 3, 1, 6, 4, 5},
			{3, 1, 2, 6, 7, 8, 5, 9, 4},
			{6, 4, 5, 9, 1, 2, 8, 3, 7},
			{9, 7, 8, 3, 4, 5, 2, 6, 1},
		},
	}

	runCase(t, c, exps)
}

func runCase(t *testing.T, c Board, exps []Board) {
	results := make(chan Board)
	var wg sync.WaitGroup
	wg.Add((1))
	go func() {
		defer wg.Done()
		for act := range results {
			exact := false
			for _, exp := range exps {
				if act == exp {
					exact = true
					break
				}
			}
			if !exact {
				fmt.Println("got")
				act.Print()
				fmt.Println("expected")
				for _, exp := range exps {
					exp.Print()
				}
			}
		}
	}()
	sudoku := New(c)
	sudoku.Solve(results)
	wg.Wait()
}

/*
	{1, 2, 3, 4, 5, 6, 7, 8, 9},
	{4, 5, 6, 7, 8, 9, 1, 2, 3},
	{7, 8, 9, 1, 2, 3, 4, 5, 6},
	{2, 3, 1, 5, 0, 0, 0, 0, 0},
	{5, 6, 4, 0, 3, 0, 0, 0, 0},
	{8, 9, 7, 0, 0, 1, 0, 0, 0},
	{3, 1, 2, 0, 0, 0, 5, 0, 0},
	{6, 4, 5, 0, 0, 0, 0, 3, 0},
	{9, 7, 8, 0, 0, 0, 0, 0, 1},
*/

/*
	{1, 2, 3, 4, 5, 6, 7, 8, 9},
	{4, 5, 6, 7, 8, 9, 1, 2, 3},
	{7, 8, 9, 1, 2, 3, 4, 5, 6},
	{2, 3, 1, 5, 0, 0, 0, 0, 0},
	{5, 6, 4, 0, 0, 0, 0, 0, 0},
	{8, 9, 7, 0, 0, 1, 0, 0, 0},
	{3, 1, 2, 0, 0, 0, 5, 0, 0},
	{6, 4, 5, 0, 0, 0, 0, 3, 0},
	{9, 7, 8, 0, 0, 0, 0, 0, 1},
*/
